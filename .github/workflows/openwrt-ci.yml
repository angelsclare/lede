name: OpenWrt-CI-HC5861

on:
  schedule:
    - cron: 0 20 * * *
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_openwrt:
    name: Build OpenWrt Firmware for HiWiFi HC5861
    runs-on: ubuntu-22.04

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) || true
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android || true
          sudo -E apt-mark hold grub-efi-amd64-signed || true
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap* || true
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWrt source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone helloworld package
        run: |
          git clone --depth=1 https://github.com/fw876/helloworld.git package/helloworld

      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file for HC5861 (精简+中文/英文)
        run: |
          rm -f .config
          # 目标设备
          echo "CONFIG_TARGET_ramips=y" >> .config
          echo "CONFIG_TARGET_ramips_mt7620=y" >> .config
          echo "CONFIG_TARGET_ramips_mt7620_DEVICE_hiwifi_hc5861=y" >> .config

          # === SSR Plus + Xray ===
          echo "CONFIG_PACKAGE_luci-app-ssr-plus=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=n" >> .config
          echo "CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=n" >> .config
          echo "CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Client=n" >> .config

          # === 中文界面 ===
          echo "CONFIG_PACKAGE_luci-i18n-base-zh-cn=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-ssr-plus-zh-cn=y" >> .config

          # === IPv6 支持 ===
          echo "CONFIG_PACKAGE_ipv6helper=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-ipv6=y" >> .config
          echo "CONFIG_PACKAGE_odhcp6c=y" >> .config
          echo "CONFIG_PACKAGE_odhcpd-ipv6only=y" >> .config

          # === PPPoE 支持 ===
          echo "CONFIG_PACKAGE_ppp=y" >> .config
          echo "CONFIG_PACKAGE_ppp-mod-pppoe=y" >> .config

          # === zram-swap (减少闪存压力) ===
          echo "CONFIG_PACKAGE_zram-swap=y" >> .config
          echo "CONFIG_KERNEL_ZSWAP_COMPRESSOR_DEFAULT=lz4" >> .config

          # === 空间优化 ===
          echo "CONFIG_STRIP_KERNEL_EXPORTS=y" >> .config
          echo "CONFIG_BUSYBOX_CUSTOM=y" >> .config
          echo "CONFIG_BUSYBOX_CONFIG_FEATURE_IPV6=y" >> .config

          # 去掉 USB 支持，节省空间
          echo "CONFIG_PACKAGE_kmod-usb-core=n" >> .config
          echo "CONFIG_PACKAGE_kmod-usb-ohci=n" >> .config
          echo "CONFIG_PACKAGE_kmod-usb2=n" >> .config
          echo "CONFIG_PACKAGE_kmod-usb-storage=n" >> .config
          echo "CONFIG_PACKAGE_kmod-fs-ext4=n" >> .config
          echo "CONFIG_PACKAGE_block-mount=n" >> .config
          echo "CONFIG_PACKAGE_mount-utils=n" >> .config

          # 压缩 rootfs，去掉调试符号
          echo "CONFIG_KERNEL_DEBUG_INFO=n" >> .config
          echo "CONFIG_KERNEL_KALLSYMS=n" >> .config
          echo "CONFIG_TARGET_IMAGES_GZIP=y" >> .config
          echo "CONFIG_TARGET_ROOTFS_SQUASHFS=y" >> .config

          make defconfig

      - name: Remove unused LuCI language packs
        run: |
          # 删除除 zh-cn 和 en 外的所有语言包
          find feeds/luci/modules/luci-base/po/ -maxdepth 1 -type d ! -name "zh-cn" ! -name "en" ! -name "po" -exec rm -rf {} +
          find feeds/luci/applications/ -type d -path "*/po/*" ! -name "zh-cn" ! -name "en" -exec rm -rf {} +

      - name: Download packages
        run: make download -j$(nproc)

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "=== Space usage ==="
          df -h
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifacts (official tar style)
        run: |
          mkdir -p ./artifact
          tar -czf ./artifact/firmware.tar.gz -C ./bin/targets .
          mkdir -p ./artifact/package
          find ./bin/packages/ -type f -name "*.ipk" -exec cp -f {} ./artifact/package/ \; || true

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware
          path: ./artifact/firmware.tar.gz

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_packages
          path: ./artifact/package/

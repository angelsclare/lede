name: OpenWrt-CI

on:
  workflow_dispatch:
  schedule:
    - cron: '0 20 * * *'  # 每天北京时间 4 点自动构建

permissions:
  contents: read

jobs:
  build_openwrt:
    name: Build OpenWrt for HiWiFi HC5861 with SSR+ (中文界面)
    runs-on: ubuntu-22.04

    steps:
      - name: Cleanup environment and install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) || true
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android || true
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib \
            g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 \
            libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
            libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool \
            lrzsz ninja-build p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools \
            qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
            vim wget xmlto xxd zlib1g-dev
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Update feeds
        run: |
          sed -i 's|#src-git helloworld|src-git helloworld|g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure target and packages (含中文界面)
        run: |
          cat > .config <<EOF
          # 平台
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt7620=y
          CONFIG_TARGET_ramips_mt7620_DEVICE_hiwifi_hc5861=y

          # LuCI 基础组件
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-ssl=y
          CONFIG_PACKAGE_uhttpd=y
          CONFIG_PACKAGE_uhttpd-mod-ubus=y
          CONFIG_PACKAGE_libopenssl=y
          CONFIG_PACKAGE_px5g-wolfssl=y

          # PPPoE
          CONFIG_PACKAGE_ppp=y
          CONFIG_PACKAGE_ppp-mod-pppoe=y

          # SSR-Plus
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-i18n-ssr-plus-zh-cn=y

          # —— 中文界面设置 —— 
          CONFIG_LUCI_LANG_zh-cn=y
          CONFIG_PACKAGE_luci-i18n-base-zh-cn=y

          # 常用组件中文翻译（根据需要可增删）
          CONFIG_PACKAGE_luci-i18n-uhttpd-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-upnp-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y

          # 禁用可能导致错误的孤立翻译包
          # CONFIG_PACKAGE_luci-i18n-nlbwmon-zh-cn is not set
          EOF

          make defconfig

      - name: Download packages
        run: make download -j16

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Disk Usage After Build:"
          echo "======================="
          df -h
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Show last 200 lines of build log on failure
        if: failure()
        run: |
          echo "======================="
          echo "Last 200 lines of build log:"
          echo "======================="
          find ./ -name '*.log' -exec tail -n 200 {} \; || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

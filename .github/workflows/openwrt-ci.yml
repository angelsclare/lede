name: OpenWrt-CI-HC5861

on:
  schedule:
    - cron: 0 20 * * *
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_openwrt:
    name: Build OpenWrt Firmware for HiWiFi HC5861
    runs-on: ubuntu-22.04

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) || true
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android || true
          sudo -E apt-mark hold grub-efi-amd64-signed || true
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap* || true
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWrt source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clone helloworld package
        run: |
          git clone --depth=1 https://github.com/fw876/helloworld.git package/helloworld

      - name: Enable helloworld feed in feeds.conf.default
        run: |
          sed -i 's/^#src-git helloworld/src-git helloworld/' ./feeds.conf.default || echo "src-git helloworld https://github.com/fw876/helloworld.git" >> feeds.conf.default

      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file for HC5861 and SSR
        run: |
          make defconfig
          echo "CONFIG_TARGET_ramips=y" >> .config
          echo "CONFIG_TARGET_ramips_mt7620=y" >> .config
          echo "CONFIG_TARGET_ramips_mt7620_DEVICE_hiwifi_hc5861=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-ssr-plus=y" >> .config
          echo "CONFIG_PACKAGE_helloworld=y" >> .config
          make defconfig

      - name: Download packages
        run: make download -j$(nproc)

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "=== Space usage ==="
          df -h
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          mkdir -p ./artifact/firmware
          rm -rf $(find ./bin/targets/ -type d -name "packages" || true)
          find ./bin/packages/ -type f -name "*.ipk" -exec cp -f {} ./artifact/package/ \; || true
          find ./bin/targets/ -type f \( -name "*.buildinfo" -o -name "*.manifest" \) -exec cp -f {} ./artifact/buildinfo/ \; || true
          cp -rf ./bin/targets/ramips/mt7620 ./artifact/firmware || true

      - name: Upload buildinfo artifact
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware
          path: ./artifact/firmware/
